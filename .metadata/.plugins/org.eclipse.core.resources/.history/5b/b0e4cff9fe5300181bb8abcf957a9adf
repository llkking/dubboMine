package com.hosjoy.dubbo.provider.util.interFace.impl;

import java.util.Date;
import java.util.Properties;

import javax.mail.Message.RecipientType;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import com.alibaba.dubbo.config.annotation.Service;
import com.hosjoy.dubbo.provider.util.interFace.IUtilsService;

@Service
public class UtilsServiceImpl implements IUtilsService{
	
	public static final String SMTPSERVERQQ = "smtp.qq.com";
    public static final String SMTPPORTQQ = "465";
 // 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）
    // PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）, 
    //     对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。
    public static final String ACCOUTQQ = "2399392911@qq.com";
    public static final String PWDQQ = "jdlosyxfqxgyecif";
    public static final String sender = "陆老大";

    

    // 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般(只是一般, 绝非绝对)格式为: smtp.xxx.com
	
    @Override
    public boolean sendEmailService(String receiverEmail,String emailCode,String topic) throws Exception {
    	
    	
    	// 1. 创建参数配置, 用于连接邮件服务器的参数配置
        Properties props = new Properties();                    // 参数配置
        props.setProperty("mail.transport.protocol", "smtp");   // 使用的协议（JavaMail规范要求）
        props.setProperty("mail.smtp.host", SMTPSERVERQQ);   // 发件人的邮箱的 SMTP 服务器地址
        props.setProperty("mail.smtp.auth", "true");            // 需要请求认证
        /*
         * PS: 某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),
                   如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误.
           SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,
                    需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,
           Q邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)
         */
        //以下为ssl连接所需的配置,
        props.setProperty("mail.smtp.port", SMTPPORTQQ);
        props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.setProperty("mail.smtp.socketFactory.fallback", "false");
        props.setProperty("mail.smtp.socketFactory.port", SMTPPORTQQ);
        
     // 根据邮件配置创建会话，注意session别导错包
        Session session = Session.getDefaultInstance(props);//Session session = Session.getInstance(props);
        // 开启debug模式，可以看到更多详细的输入日志
        session.setDebug(true);
        //创建邮件
        MimeMessage message = createEmail(session,receiverEmail,emailCode,topic);
        
        //获取传输通道,根据 Session 获取邮件传输对象
        Transport transport = session.getTransport();
        //使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错
        // 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错
        // 
        //    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,
        //           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误
        //           类型到对应邮件服务器的帮助网站上查看具体失败原因。
        //
        //    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:
        //           (1) 邮箱没有开启 SMTP 服务;
        //           (2) 邮箱密码错误, 例如某些邮箱开启了独立密码;
        //           (3) 邮箱服务器要求必须要使用 SSL 安全连接;
        //           (4) 请求过于频繁或其他原因, 被邮件服务器拒绝服务;
        //           (5) 如果以上几点都确定无误, 到邮件服务器网站查找帮助。
        transport.connect(SMTPSERVERQQ,ACCOUT, PWD);
        //连接，并发送邮件
        transport.sendMessage(message, message.getAllRecipients());
        transport.close();
    	return true;
    }
    
    public MimeMessage createEmail(Session session,String receiverEmail,String emailCode,String topic) throws Exception {
    	// 1. 创建一封邮件根据session
        MimeMessage msg = new MimeMessage(session);
        // 2. From: address邮件地址, personal邮件昵称, charset编码方式
        InternetAddress fromAddress = new InternetAddress(ACCOUT,
        		sender, "utf-8");
        msg.setFrom(fromAddress);
        // To: 收件人（可以增加多个收件人、抄送、密送）
        InternetAddress receiveAddress = new InternetAddress(
        		receiverEmail, emailCode, "utf-8");
        msg.setRecipient(RecipientType.TO, receiveAddress);
        //  收件人
        //  setRecipient(MimeMessage.RecipientType.TO, new InternetAddress("cc@receive.com", "USER_CC", "UTF-8"));
        //    To: 增加收件人（可选）
        //  addRecipient(MimeMessage.RecipientType.TO, new InternetAddress("dd@receive.com", "USER_DD", "UTF-8"));
        //    Cc: 抄送（可选）
        //  setRecipient(MimeMessage.RecipientType.CC, new InternetAddress("ee@receive.com", "USER_EE", "UTF-8"));
        //    Bcc: 密送（可选）
        //  setRecipient(MimeMessage.RecipientType.BCC, new InternetAddress("ff@receive.com", "USER_FF", "UTF-8"));
        
        msg.addRecipient(MimeMessage.RecipientType.TO, new InternetAddress("1078069883@qq.com", "峰少", "UTF-8"));
        
        
        //4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）
        msg.setSubject(topic, "utf-8");
        msg.setText("我是个程序员，一天我坐在路边一边喝水一边苦苦检查程序。 这时一个乞丐在我边上坐下了"
        		+ "，开始要饭，我觉得可怜，就给了他1块钱。 然后接着调试程序。他可能生意不好，就无聊的看看我在干什么，"
        		+ "然后过了一会，他缓缓地指着我的屏幕说，这里少了个分号");
        // 设置显示的发件时间
        msg.setSentDate(new Date());
        // 保存设置
        msg.saveChanges();
        return msg;
    }
}
